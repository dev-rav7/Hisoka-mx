
const { ven } = require('../hisoka');
const config = require('../settings');

// Gestionnaire de param√®tres de groupe
ven({
    pattern: "groupsettings",
    react: "‚öôÔ∏è",
    desc: "Interface de gestion des param√®tres du groupe",
    category: "group",
    filename: __filename,
    use: "view/edit/reset"
}, async (conn, mek, m, { from, isGroup, isGroupAdmins, isOwner, args, reply }) => {
    if (!isGroup) return reply("‚ö†Ô∏è Cette commande ne fonctionne que dans les groupes !");
    if (!isGroupAdmins && !isOwner) return reply("‚ö†Ô∏è Seuls les admins peuvent utiliser cette commande !");

    const action = args[0]?.toLowerCase() || 'view';
    
    // Initialiser les param√®tres de groupe
    global.groupSettings = global.groupSettings || {};
    if (!global.groupSettings[from]) {
        global.groupSettings[from] = {
            antilink: false,
            welcome: true,
            antiDelete: false,
            autoMute: false,
            rules: null,
            warnings: true,
            autoKick: false,
            mediaRestriction: false,
            spamProtection: true,
            language: 'fr',
            timezone: 'Europe/Paris',
            modifiedBy: null,
            modifiedAt: null
        };
    }

    const settings = global.groupSettings[from];

    switch (action) {
        case 'view':
            const statusIcon = (status) => status ? '‚úÖ' : '‚ùå';
            
            const settingsMessage = `
‚öôÔ∏è **PARAM√àTRES DU GROUPE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üõ°Ô∏è **S√©curit√© & Mod√©ration**
‚Ä¢ Anti-liens : ${statusIcon(settings.antilink)}
‚Ä¢ Anti-suppression : ${statusIcon(settings.antiDelete)}
‚Ä¢ Syst√®me d'avertissements : ${statusIcon(settings.warnings)}
‚Ä¢ Auto-kick : ${statusIcon(settings.autoKick)}
‚Ä¢ Protection spam : ${statusIcon(settings.spamProtection)}

üë• **Gestion des Membres**
‚Ä¢ Message de bienvenue : ${statusIcon(settings.welcome)}
‚Ä¢ Auto-mute : ${statusIcon(settings.autoMute)}
‚Ä¢ Restriction m√©dia : ${statusIcon(settings.mediaRestriction)}

üìã **Informations G√©n√©rales**
‚Ä¢ R√®gles d√©finies : ${settings.rules ? '‚úÖ Oui' : '‚ùå Non'}
‚Ä¢ Langue : ${settings.language.toUpperCase()}
‚Ä¢ Fuseau horaire : ${settings.timezone}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${settings.modifiedBy ? `üîß **Derni√®re modification :**
üë§ Par : @${settings.modifiedBy.split('@')[0]}
üïí Le : ${new Date(settings.modifiedAt).toLocaleString()}` : ''}

üìå **Commandes disponibles :**
‚Ä¢ \`.groupsettings edit\` - Modifier les param√®tres
‚Ä¢ \`.groupsettings reset\` - R√©initialiser tout
‚Ä¢ \`.gsset [param√®tre] [on/off]\` - Modification rapide

*Utilisez \`.help groupsettings\` pour plus d'infos*
            `;

            await conn.sendMessage(from, {
                text: settingsMessage,
                contextInfo: {
                    mentionedJid: settings.modifiedBy ? [settings.modifiedBy] : [],
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363400575205721@newsletter',
                        newsletterName: 'ùóõùóúùó¶ùó¢ùóûùóî-ùó†ùóó',
                        serverMessageId: 143
                    }
                }
            }, { quoted: mek });
            break;

        case 'edit':
            const editMessage = `
‚öôÔ∏è **MODIFIER LES PARAM√àTRES**

üìå **Commandes de modification rapide :**

üõ°Ô∏è **S√©curit√© :**
‚Ä¢ \`.gsset antilink on/off\` - Anti-liens
‚Ä¢ \`.gsset antidelete on/off\` - Anti-suppression
‚Ä¢ \`.gsset warnings on/off\` - Avertissements
‚Ä¢ \`.gsset autokick on/off\` - Auto-kick
‚Ä¢ \`.gsset spam on/off\` - Protection spam

üë• **Membres :**
‚Ä¢ \`.gsset welcome on/off\` - Bienvenue
‚Ä¢ \`.gsset automute on/off\` - Auto-mute
‚Ä¢ \`.gsset media on/off\` - Restriction m√©dia

üìã **Autres :**
‚Ä¢ \`.gsset language fr/en/es\` - Langue
‚Ä¢ \`.gsset timezone [timezone]\` - Fuseau horaire

üí° **Exemple :** \`.gsset antilink on\`
            `;
            reply(editMessage);
            break;

        case 'reset':
            global.groupSettings[from] = {
                antilink: false,
                welcome: true,
                antiDelete: false,
                autoMute: false,
                rules: null,
                warnings: true,
                autoKick: false,
                mediaRestriction: false,
                spamProtection: true,
                language: 'fr',
                timezone: 'Europe/Paris',
                modifiedBy: m.sender,
                modifiedAt: Date.now()
            };
            
            reply(`
üîÑ **PARAM√àTRES R√âINITIALIS√âS**

‚úÖ Tous les param√®tres ont √©t√© remis aux valeurs par d√©faut.
üë§ **R√©initialis√© par :** @${m.sender.split('@')[0]}
üïí **Heure :** ${new Date().toLocaleString()}

*Utilisez \`.groupsettings view\` pour voir les nouveaux param√®tres*
            `);
            break;

        default:
            reply(`
‚öôÔ∏è **GESTIONNAIRE DE PARAM√àTRES**

üìå **Commandes disponibles :**
‚Ä¢ \`.groupsettings view\` - Voir les param√®tres actuels
‚Ä¢ \`.groupsettings edit\` - Guide de modification
‚Ä¢ \`.groupsettings reset\` - R√©initialiser tout

*Seuls les admins peuvent utiliser ces commandes*
            `);
    }
});

// Commande de modification rapide
ven({
    pattern: "gsset",
    react: "üîß",
    desc: "Modification rapide des param√®tres de groupe",
    category: "group",
    filename: __filename,
    use: "[param√®tre] [valeur]"
}, async (conn, mek, m, { from, isGroup, isGroupAdmins, isOwner, args, reply }) => {
    if (!isGroup) return reply("‚ö†Ô∏è Cette commande ne fonctionne que dans les groupes !");
    if (!isGroupAdmins && !isOwner) return reply("‚ö†Ô∏è Seuls les admins peuvent utiliser cette commande !");

    if (args.length < 2) {
        return reply(`
üîß **MODIFICATION RAPIDE**

üìå **Utilisation :** \`.gsset [param√®tre] [valeur]\`

**Param√®tres disponibles :**
‚Ä¢ antilink, antidelete, warnings, autokick, spam
‚Ä¢ welcome, automute, media
‚Ä¢ language, timezone

**Valeurs :** on/off (ou valeur sp√©cifique)

üí° **Exemple :** \`.gsset antilink on\`
        `);
    }

    const parameter = args[0].toLowerCase();
    const value = args[1].toLowerCase();

    // Initialiser les param√®tres
    global.groupSettings = global.groupSettings || {};
    if (!global.groupSettings[from]) {
        global.groupSettings[from] = {
            antilink: false, welcome: true, antiDelete: false,
            autoMute: false, rules: null, warnings: true,
            autoKick: false, mediaRestriction: false, spamProtection: true,
            language: 'fr', timezone: 'Europe/Paris',
            modifiedBy: null, modifiedAt: null
        };
    }

    const settings = global.groupSettings[from];
    const boolValue = value === 'on' || value === 'true';

    switch (parameter) {
        case 'antilink':
            settings.antilink = boolValue;
            reply(`üîó **Anti-liens ${boolValue ? 'activ√©' : 'd√©sactiv√©'}** pour ce groupe.`);
            break;

        case 'antidelete':
            settings.antiDelete = boolValue;
            reply(`üóëÔ∏è **Anti-suppression ${boolValue ? 'activ√©' : 'd√©sactiv√©'}** pour ce groupe.`);
            break;

        case 'warnings':
            settings.warnings = boolValue;
            reply(`‚ö†Ô∏è **Syst√®me d'avertissements ${boolValue ? 'activ√©' : 'd√©sactiv√©'}** pour ce groupe.`);
            break;

        case 'autokick':
            settings.autoKick = boolValue;
            reply(`üë¢ **Auto-kick ${boolValue ? 'activ√©' : 'd√©sactiv√©'}** pour ce groupe.`);
            break;

        case 'spam':
            settings.spamProtection = boolValue;
            reply(`üö´ **Protection spam ${boolValue ? 'activ√©e' : 'd√©sactiv√©e'}** pour ce groupe.`);
            break;

        case 'welcome':
            settings.welcome = boolValue;
            reply(`üëã **Messages de bienvenue ${boolValue ? 'activ√©s' : 'd√©sactiv√©s'}** pour ce groupe.`);
            break;

        case 'automute':
            settings.autoMute = boolValue;
            reply(`üîá **Auto-mute ${boolValue ? 'activ√©' : 'd√©sactiv√©'}** pour ce groupe.`);
            break;

        case 'media':
            settings.mediaRestriction = boolValue;
            reply(`üì± **Restriction m√©dia ${boolValue ? 'activ√©e' : 'd√©sactiv√©e'}** pour ce groupe.`);
            break;

        case 'language':
            if (['fr', 'en', 'es'].includes(value)) {
                settings.language = value;
                reply(`üåê **Langue chang√©e en ${value.toUpperCase()}** pour ce groupe.`);
            } else {
                reply(`‚ùå Langue non support√©e. Utilisez : fr, en, es`);
            }
            break;

        case 'timezone':
            settings.timezone = args.slice(1).join(' ');
            reply(`üïí **Fuseau horaire chang√© en ${settings.timezone}** pour ce groupe.`);
            break;

        default:
            reply(`
‚ùå **Param√®tre inconnu :** ${parameter}

**Param√®tres disponibles :**
‚Ä¢ antilink, antidelete, warnings, autokick, spam
‚Ä¢ welcome, automute, media
‚Ä¢ language, timezone

*Utilisez \`.groupsettings edit\` pour voir le guide complet*
            `);
            return;
    }

    // Mettre √† jour les infos de modification
    settings.modifiedBy = m.sender;
    settings.modifiedAt = Date.now();
});
