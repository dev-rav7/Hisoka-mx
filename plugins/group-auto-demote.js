
const { ven } = require('../hisoka');
const config = require('../settings');
const { getGroupAdmins } = require('../lib/functions');

// Syst√®me de r√©trogradation automatique
ven({
    pattern: "autodemote",
    react: "‚¨áÔ∏è",
    desc: "Configuration de la r√©trogradation automatique des admins",
    category: "group",
    filename: __filename,
    use: "on/off [jours]"
}, async (conn, mek, m, { from, isGroup, isGroupAdmins, isOwner, args, reply }) => {
    if (!isGroup) return reply("‚ö†Ô∏è Cette commande ne fonctionne que dans les groupes !");
    if (!isGroupAdmins && !isOwner) return reply("‚ö†Ô∏è Seuls les admins peuvent utiliser cette commande !");

    const action = args[0]?.toLowerCase();
    const days = parseInt(args[1]) || 30;

    if (!action || !['on', 'off', 'status', 'check'].includes(action)) {
        return reply(`
üîß **Auto-Demote System**

üìå **Utilisation :**
‚Ä¢ \`.autodemote on [jours]\` - Activer (d√©faut: 30 jours)
‚Ä¢ \`.autodemote off\` - D√©sactiver
‚Ä¢ \`.autodemote status\` - Voir le statut
‚Ä¢ \`.autodemote check\` - V√©rifier les admins inactifs

‚ö†Ô∏è **Note :** Les admins inactifs depuis X jours seront automatiquement r√©trograd√©s.
        `);
    }

    // Simuler une base de donn√©es (en production, utilisez une vraie DB)
    global.autoDemoteSettings = global.autoDemoteSettings || {};
    
    switch (action) {
        case 'on':
            global.autoDemoteSettings[from] = {
                enabled: true,
                days: days,
                enabledBy: m.sender,
                enabledAt: Date.now()
            };
            reply(`‚úÖ **Auto-Demote Activ√© !**\n\n‚è∞ **P√©riode d'inactivit√© :** ${days} jours\nüë§ **Activ√© par :** @${m.sender.split('@')[0]}\n\n*Les admins inactifs depuis ${days} jours seront automatiquement r√©trograd√©s.*`);
            break;

        case 'off':
            if (global.autoDemoteSettings[from]) {
                delete global.autoDemoteSettings[from];
                reply(`‚ùå **Auto-Demote D√©sactiv√© !**\n\n*La r√©trogradation automatique a √©t√© d√©sactiv√©e pour ce groupe.*`);
            } else {
                reply(`‚ÑπÔ∏è **Auto-Demote** n'√©tait pas activ√© dans ce groupe.`);
            }
            break;

        case 'status':
            const settings = global.autoDemoteSettings[from];
            if (settings && settings.enabled) {
                const enabledDate = new Date(settings.enabledAt).toLocaleDateString();
                reply(`
üìä **Statut Auto-Demote**

‚úÖ **Statut :** Activ√©
‚è∞ **P√©riode :** ${settings.days} jours
üë§ **Activ√© par :** @${settings.enabledBy.split('@')[0]}
üìÖ **Depuis :** ${enabledDate}

*Les admins inactifs depuis ${settings.days} jours seront r√©trograd√©s.*
                `);
            } else {
                reply(`‚ùå **Auto-Demote** n'est pas activ√© dans ce groupe.`);
            }
            break;

        case 'check':
            const groupMetadata = await conn.groupMetadata(from);
            const admins = getGroupAdmins(groupMetadata.participants);
            const botAdmin = admins.includes(conn.user.id.split(':')[0] + '@s.whatsapp.net');
            
            if (!botAdmin) {
                return reply(`‚ö†Ô∏è Je dois √™tre admin pour v√©rifier l'activit√© des membres !`);
            }

            // Simuler la v√©rification d'activit√© (en production, utilisez une vraie DB)
            const inactiveAdmins = [];
            const activeAdmins = [];
            
            for (const admin of admins) {
                if (admin === conn.user.id.split(':')[0] + '@s.whatsapp.net') continue;
                // Simuler l'inactivit√© (en production, v√©rifiez la vraie activit√©)
                const daysSinceActivity = Math.floor(Math.random() * 60);
                if (daysSinceActivity > (global.autoDemoteSettings[from]?.days || 30)) {
                    inactiveAdmins.push({
                        jid: admin,
                        days: daysSinceActivity
                    });
                } else {
                    activeAdmins.push({
                        jid: admin,
                        days: daysSinceActivity
                    });
                }
            }

            let message = `
üìä **V√©rification des Admins**

üë• **Total des admins :** ${admins.length}
‚úÖ **Admins actifs :** ${activeAdmins.length}
‚ö†Ô∏è **Admins inactifs :** ${inactiveAdmins.length}

`;

            if (inactiveAdmins.length > 0) {
                message += `\nüî¥ **Admins Inactifs (${global.autoDemoteSettings[from]?.days || 30}+ jours) :**\n`;
                inactiveAdmins.forEach(admin => {
                    message += `‚Ä¢ @${admin.jid.split('@')[0]} (${admin.days} jours)\n`;
                });
            }

            if (activeAdmins.length > 0) {
                message += `\nüü¢ **Admins Actifs :**\n`;
                activeAdmins.forEach(admin => {
                    message += `‚Ä¢ @${admin.jid.split('@')[0]} (${admin.days} jours)\n`;
                });
            }

            reply(message);
            break;
    }
});

// V√©rification automatique p√©riodique (simul√©e)
setInterval(async () => {
    if (!global.autoDemoteSettings) return;
    
    for (const [groupId, settings] of Object.entries(global.autoDemoteSettings)) {
        if (!settings.enabled) continue;
        
        try {
            const groupMetadata = await conn.groupMetadata(groupId);
            const admins = getGroupAdmins(groupMetadata.participants);
            const botAdmin = admins.includes(conn.user.id.split(':')[0] + '@s.whatsapp.net');
            
            if (!botAdmin) continue;
            
            // V√©rifier et r√©trograder les admins inactifs
            // (Code de v√©rification d'activit√© r√©elle n√©cessaire)
            
        } catch (error) {
            console.error('Auto-demote check error:', error);
        }
    }
}, 24 * 60 * 60 * 1000); // V√©rifier toutes les 24 heures
